To obtain an efficient algorithm for transformation via rotations, we'd like it to be linear in terms of the number of rotations i.e. O(n) rotations.  One way to achieve this is to note that for any binary search tree is to find an intermediate form T* such that if we transform the tree T1 to T* in linear number rotations and we can transform the tree T* to T2 in linear number of rotations then the whole operation is O(n) + O(n) = O(n) linear in the number of rotations.

We do this by converting T1 into a right chain i.e. a BST in which no node has left child.  For any binary search tree, let's call its right spine the set of all nodes reachable from the root node just by following the right child of each node.  To convert T1 to a right chain, we're converting T1 to a BST in which the right spine is the entire tree.  Note that finding the last node on the right chain with a left child and doing a right rotation adds one node to the right spine.  Also note that since the root node is in the right spine every BST has at least one node in the right spine.  Finally note that finding the deepest node in the right spine with a left child and doing a left rotation with that left child as pivot and the node on the right spine as root adds exactly one node to the right spine.  We can do this right rotation operation at most n-1 times (since the root node was already in the right spine) before we've converted T1 to T* in at most n-1 (right) rotations. i.e. O(n)

Note we can convert T2 to the same T* exactly the same way (with the same number of operations since T1 and T2 contain exactly the same elements and thus size).  Finally, since a left rotation is the reverse of a right rotation, then we should note that reversing the order of operations and doing left rotations instead of right rotations converts T* to T2.

So to convert one BST T1 to another T2 repeatedly find the last node on the right chain with a left child and do a right rotation to get to intermediate form T*.  Do the same on T2 to determine all the right rotations needed to transform T2 to T*.  Then do left rotations on the same pivots in reverse order.  The total number of rotations should be O(n) or to be more precise 2n-2.
